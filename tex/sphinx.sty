%
% sphinx.sty
%
% Adapted from the old python.sty, mostly written by Fred Drake,
% by Georg Brandl.
%
%
% Modified by Jeff Terrace to work with puthesis
%

\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\ProvidesPackage{sphinx}[2010/01/15 LaTeX package (Sphinx markup)]

\RequirePackage{textcomp}
\RequirePackage{fancyhdr}
\RequirePackage{fancybox}
\RequirePackage{letltxmacro}
%\RequirePackage{titlesec}
\RequirePackage{tabulary}
\RequirePackage{amsmath} % for \text
%\RequirePackage{makeidx}
\RequirePackage{framed}
\RequirePackage{environ}
\RequirePackage{ifthen}
\RequirePackage{color}
% For highlighted code.
\RequirePackage{fancyvrb}
% For table captions.
\RequirePackage{threeparttable}
% Handle footnotes in tables.
\RequirePackage{footnote}
\makesavenoteenv{tabulary}
% For floating figures in the text.
\RequirePackage{wrapfig}
% Separate paragraphs by space by default.
\RequirePackage{parskip}

% change the eqref command to just be a normal ref
\renewcommand*{\eqref}[1]{\ref{#1}}

% % Redefine these colors to your liking in the preamble.
\definecolor{TitleColor}{rgb}{0.0,0.0,0.15}
\definecolor{InnerLinkColor}{rgb}{0.0,0.1,0.25}
\definecolor{OuterLinkColor}{rgb}{0.0,0.1,0.25}
% % Redefine these colors to something not white if you want to have colored
% % background and border for code examples.
\definecolor{VerbatimColor}{rgb}{0.97,0.97,0.97}
\definecolor{VerbatimBorderColor}{rgb}{0.5,0.5,0.5}

% for PDF output, use colors and maximal compression
% \newif\ifsphinxpdfoutput\sphinxpdfoutputfalse
% \ifx\pdfoutput\undefined\else\ifcase\pdfoutput
%   \let\pyNormalColor\relax
%   \let\pyTitleColor\relax
% \else
%    \sphinxpdfoutputtrue
%    \input{pdfcolor}
%    \def\pyNormalColor{\color[rgb]{0.0,0.0,0.0}}
%    \def\pyTitleColor{\color{TitleColor}}
%    \pdfcompresslevel=9
% \fi\fi

% XeLaTeX can do colors, too
% \ifx\XeTeXrevision\undefined\else
%   \def\pyNormalColor{\color[rgb]{0.0,0.0,0.0}}
%   \def\pyTitleColor{\color{TitleColor}}
% \fi

% Increase printable page size (copied from fullpage.sty)
\topmargin 0pt
\advance \topmargin by -\headheight
\advance \topmargin by -\headsep

% attempt to work a little better for A4 users
\textheight \paperheight
\advance\textheight by -2in

\oddsidemargin 0pt
\evensidemargin 0pt
%\evensidemargin -.25in  % for ``manual size'' documents
\marginparwidth 0.5in

\textwidth \paperwidth
\advance\textwidth by -2in

% Style parameters and macros used by most documents here
\raggedbottom
\sloppy
\hbadness = 4000                % don't print trivial gripes
\vbadness = 10000

\pagestyle{fancy}               % start this way; change for
\pagenumbering{roman}           % ToC & chapters

\renewcommand{\chaptermark}[1]{%
    \markboth{\ #1}{}
}

\newcommand{\udot}[1]{%
    \tikz[baseline=(todotted.base)]{%
        \node[inner sep=4pt,outer sep=0pt] (todotted) {#1};
        \draw[loosely dotted, thick, opacity=0.75] (todotted.south west) -- (todotted.south east);
    }%
}%

\setlength{\headheight}{24pt} 
\fancyfoot[C]{%
    % EasterEgg
    \ifthenelse{\value{page}=42}
        {\scshape{\reflectbox{\udot{~\thepage~~~}}}}
        {\scshape{\udot{~\thepage~~~}}}
}%

% Remove the header from pages with chapters on them:
\fancypagestyle{plain}{%
    \fancyhead{}
    \renewcommand{\headrule}{}
}%

\fancyhead[LO]{{\nouppercase{\slshape{\leftmark}}}}
\fancyhead[RO]{{\nouppercase{\scshape{\rightmark}}}}
\renewcommand{\headrule}{\vbox to 0pt{\hbox to \headwidth{\dotfill}\vss}}


% Some custom font markup commands.
\newcommand{\strong}[1]{{\bf #1}}
\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\bfcode}[1]{\code{\bfseries#1}}
\newcommand{\email}[1]{\textsf{#1}}

% % Redefine the Verbatim environment to allow border and background colors.
% % The original environment is still used for verbatims within tables.
\let\OriginalVerbatim=\Verbatim
\let\endOriginalVerbatim=\endVerbatim

% Play with vspace to be able to keep the indentation.
\newlength\distancetoright
\def\mycolorbox#1{%
  \setlength\distancetoright{\linewidth}%
  \advance\distancetoright -\@totalleftmargin %
  \fcolorbox{VerbatimBorderColor}{VerbatimColor}{%
  \begin{minipage}{\distancetoright}%
    #1
  \end{minipage}%
  }%
}
\def\FrameCommand{\mycolorbox}

\renewcommand{\Verbatim}[1][1]{%
  % list starts new par, but we don't want it to be set apart vertically
  \bgroup\parskip=0pt%
  \smallskip%
  % The list environement is needed to control perfectly the vertical
  % space.
  \list{}{%
  \setlength\parskip{0pt}%
  \setlength\itemsep{0ex}%
  \setlength\topsep{0ex}%
  \setlength\partopsep{0pt}%
  \setlength\leftmargin{0pt}%
  }%
  \item\MakeFramed {\FrameRestore}%
     \small%
    \OriginalVerbatim[#1]%
}
\renewcommand{\endVerbatim}{%
    \endOriginalVerbatim%
  \endMakeFramed%
  \endlist%
  % close group to restore \parskip
  \egroup%
}

% \moduleauthor{name}{email}
\newcommand{\moduleauthor}[2]{}

% \sectionauthor{name}{email}
\newcommand{\sectionauthor}[2]{}

% Augment the sectioning commands used to get our own font family in place,
% and reset some internal data items:
% \titleformat{\section}{\Large\pyHeaderFamily}%
%             {\pyTitleColor\thesection}{0.5em}{\pyTitleColor}{\pyNormalColor}
% \titleformat{\subsection}{\large\pyHeaderFamily}%
%             {\pyTitleColor\thesubsection}{0.5em}{\pyTitleColor}{\pyNormalColor}

% {fulllineitems} is the main environment for object descriptions.
%
% \newcommand{\pyitemnewline}[1]{%
%   \@tempdima\linewidth%
%   \advance\@tempdima \leftmargin\makebox[\@tempdima][l]{#1}%
% }
% 
% \newenvironment{fulllineitems}{
%   \begin{list}{}{\labelwidth \leftmargin \labelsep 0pt
%                  \rightmargin 0pt \topsep -\parskip \partopsep \parskip
%                  \itemsep -\parsep
%                  \let\makelabel=\pyitemnewline}
% }{\end{list}}

% \optional is used for ``[, arg]``, i.e. desc_optional nodes.
% \newcommand{\optional}[1]{%
%   {\textnormal{\Large[}}{#1}\hspace{0.5mm}{\textnormal{\Large]}}}
% 
% \newlength{\pyargswidth}
% \newcommand{\pysigparams}[2]{%
%   \parbox[t]{\pyargswidth}{#1\code{)}#2}}
% \newcommand{\pysigline}[1]{\item[#1]\nopagebreak}
% \newcommand{\pysiglinewithargsret}[3]{%
%   \settowidth{\pyargswidth}{#1\code{(}}%
%   \addtolength{\pyargswidth}{-2\pyargswidth}%
%   \addtolength{\pyargswidth}{\linewidth}%
%   \item[#1\code{(}\pysigparams{#2}{#3}]}

% Production lists
%
% \newenvironment{productionlist}{
% %  \def\optional##1{{\Large[}##1{\Large]}}
%   \def\production##1##2{\\\code{##1}&::=&\code{##2}}
%   \def\productioncont##1{\\& &\code{##1}}
%   \parindent=2em
%   \indent
%   \begin{tabular}{lcl}
% }{%
%   \end{tabular}
% }

\NewEnviron{notice}[2]{%
    \par
    \begin{tikzpicture}
        \node[rectangle,minimum width=0.9\textwidth] (m) {%
            \begin{minipage}{0.85\textwidth}
                \strong{#2}
                \BODY
            \end{minipage}
        };%
        \draw[dashed] (m.south west) rectangle (m.north east);
    \end{tikzpicture}
}%


% Allow the release number to be specified independently of the
% \date{}.  This allows the date to reflect the document's date and
% release to specify the release that is documented.
%
\newcommand{\pyrelease}{}
\newcommand{\version}{}
\newcommand{\shortversion}{}
\newcommand{\releaseinfo}{}
\newcommand{\releasename}{Release}
\newcommand{\release}[1]{%
  \renewcommand{\pyrelease}{\releasename\space\version}%
  \renewcommand{\version}{#1}}
\newcommand{\setshortversion}[1]{%
  \renewcommand{\shortversion}{#1}}
\newcommand{\setreleaseinfo}[1]{%
  \renewcommand{\releaseinfo}{#1}}

% Allow specification of the author's address separately from the
% author's name.  This can be used to format them differently, which
% is a good thing.
%
\newcommand{\pyauthoraddress}{}
\newcommand{\authoraddress}[1]{\renewcommand{\pyauthoraddress}{#1}}

% This sets up the fancy chapter headings that make the documents look
% at least a little better than the usual LaTeX output.
%
\@ifundefined{ChTitleVar}{}{
  \ChNameVar{\raggedleft\normalsize\pyHeaderFamily}
  \ChNumVar{\raggedleft \bfseries\Large\pyHeaderFamily}
  \ChTitleVar{\raggedleft \rm\Huge\pyHeaderFamily}
  % This creates chapter heads without the leading \vspace*{}:
  \def\@makechapterhead#1{%
    {\parindent \z@ \raggedright \normalfont
      \ifnum \c@secnumdepth >\m@ne
        \DOCH
      \fi
      \interlinepenalty\@M
      \DOTI{#1}
    }
  }
}

% Redefine description environment so that it is usable inside fulllineitems.
%
% \renewcommand{\description}{%
%   \list{}{\labelwidth\z@%
%           \itemindent-\leftmargin%
% 	  \labelsep5pt%
%           \let\makelabel=\descriptionlabel}}

% Definition lists; requested by AMK for HOWTO documents.  Probably useful
% elsewhere as well, so keep in in the general style support.
%
% \newenvironment{definitions}{%
%   \begin{description}%
%   \def\term##1{\item[##1]\mbox{}\\*[0mm]}
% }{%
%   \end{description}%
% }

% Tell TeX about pathological hyphenation cases:
% \hyphenation{Base-HTTP-Re-quest-Hand-ler}


% The following is stuff copied from docutils' latex writer.
%
% \newcommand{\optionlistlabel}[1]{\bf #1 \hfill}
% \newenvironment{optionlist}[1]
% {\begin{list}{}
%   {\setlength{\labelwidth}{#1}
%    \setlength{\rightmargin}{1cm}
%    \setlength{\leftmargin}{\rightmargin}
%    \addtolength{\leftmargin}{\labelwidth}
%    \addtolength{\leftmargin}{\labelsep}
%    \renewcommand{\makelabel}{\optionlistlabel}}
% }{\end{list}}
% 
% \newlength{\lineblockindentation}
% \setlength{\lineblockindentation}{2.5em}
% \newenvironment{lineblock}[1]
% {\begin{list}{}
%   {\setlength{\partopsep}{\parskip}
%    \addtolength{\partopsep}{\baselineskip}
%    \topsep0pt\itemsep0.15\baselineskip\parsep0pt
%    \leftmargin#1}
%  \raggedright}
% {\end{list}}

% Redefine includgraphics for avoiding images larger than the screen size
% If the size is not specified.
% \let\pyOldincludegraphics\includegraphics
% 
% \newbox\image@box%
% \newdimen\image@width%
% \renewcommand\includegraphics[2][\@empty]{%
%   \ifx#1\@empty%
%     \setbox\image@box=\hbox{\pyOldincludegraphics{#2}}%
%     \image@width\wd\image@box%
%     \ifdim \image@width>\linewidth%
%       \setbox\image@box=\hbox{\pyOldincludegraphics[width=\linewidth]{#2}}%
%       \box\image@box%
%     \else%
%       \pyOldincludegraphics{#2}%
%     \fi%
%   \else%
%     \pyOldincludegraphics[#1]{#2}%
%   \fi%
% }


% Fix the index environment to add an entry to the Table of
% Contents; this is much nicer than just having to jump to the end of the book
% and flip around, especially with multiple indexes.
%
% A similiar fix must be done to the bibliography environment, although
% dependant on document class. In particular, the '\addcontentsline' command
% should use 'chapter' for a report and 'section' for an article.
% See sphinxmanual.cls and sphinxhowto.cls for specific fixes.
%
% \let\pyOldTheindex=\theindex
% \renewcommand{\theindex}{
%   \cleardoublepage
%   \phantomsection
%   \pyOldTheindex
%   \addcontentsline{toc}{chapter}{\indexname}
% }
% 
% % Include hyperref last.

\RequirePackage[
    final,
    pdftex,
    pdfauthor={Christopher Pahl},
    pdftitle={Design und Implemtierung eines Musikempfehlungssystems
    basierend auf Datamining Algorithmen},
    pdfsubject={Design und Implemtierung eines Musikempfehlungssystems
    basierend auf Datamining Algorithmen},
    pdfkeywords={Music Recommendation, Music Information Retrieval, MIR, Data Mining, Graph Theory},
    pdfproducer={LaTeX with hyperref},
    pdfcreator={pdflatex},
    bookmarks=true,     % show or hide the bookmarks bar when displaying the document
    bookmarksopen=true, % Zeige Untermenus in PDF
    bookmarksopenlevel=1, % Gliederungstiefe in PDF beim Start festlegen 
    bookmarksnumbered=true, % Gliederung in PDF nummierieren
    % plainpages=false,   % zur korrekten Erstellung der Bookmarks
    pdfpagelabels,      % zur korrekten Erstellung der Bookmarks
    colorlinks,
    breaklinks,
    linkcolor=InnerLinkColor,filecolor=OuterLinkColor,
    menucolor=OuterLinkColor,urlcolor=OuterLinkColor,
    citecolor=InnerLinkColor
]{hyperref}



%FIXME
%\ifdefined\printmode

%\define{capsta}

%\else

% Fix anchor placement for figures with captions.
% (Note: we don't use a package option here; instead, we give an explicit
% \capstart for figures that actually have a caption.)
\RequirePackage{hypcap}

% From docutils.writers.latex2e
\providecommand{\DUspan}[2]{%
  {% group ("span") to limit the scope of styling commands
    \@for\node@class@name:=#1\do{%
    \ifcsname docutilsrole\node@class@name\endcsname%
      \csname docutilsrole\node@class@name\endcsname%
    \fi%
    }%
    {#2}% node content
  }% close "span"
}

\providecommand*{\DUprovidelength}[2]{%
  \ifthenelse{\isundefined{#1}}{\newlength{#1}\setlength{#1}{#2}}{}
}%

\DUprovidelength{\DUlineblockindent}{2.5em}
\ifthenelse{\isundefined{\DUlineblock}}{%
  \newenvironment{DUlineblock}[1]{%
    \list{}{\setlength{\partopsep}{\parskip}
            \addtolength{\partopsep}{\baselineskip}
            \setlength{\topsep}{0pt}
            \setlength{\itemsep}{0.15\baselineskip}
            \setlength{\parsep}{0pt}
            \setlength{\leftmargin}{#1}}
    \raggedright
  }
  {\endlist}
}{}%


% Backup the old macro for use in the new one:
\LetLtxMacro{\SavedHyperref}{\hyperref}

% Show pages in hyperref, but not if the target is on the same page.
\renewcommand{\hyperref}[2][\newdef]{%
    \ifthenelse{\pageref{#1}>\pageref{rst/appendix:end-of-doc}}{%
        \SavedHyperref[{#1}]{#2}
    }{%
        \ifthenelse{\pageref{#1}=\thepage}{%
            \SavedHyperref[{#1}]{#2}
        }{%
            \SavedHyperref[{#1}]{#2, (S.\pageref{#1})}
        }%
    }%
}%
